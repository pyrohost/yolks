name: Build Java Docker Images

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *' # Monthly on the 1st at midnight UTC
  push:
    branches: [main]
    paths:
      - 'src/entrypoints/java/**'
      - '.github/workflows/java.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build yolks:java_${{ matrix.distribution }}_${{ matrix.version }}_${{ matrix.variant }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        distribution: [amazoncorretto, temurin, openjdk]
        version: [8, 11, 16, 17, 18, 19, 21, 22]
        variant: [core, minecraft]
        exclude:
          - distribution: amazoncorretto
            version: 16
          - distribution: amazoncorretto
            version: 18
          - distribution: amazoncorretto
            version: 19
          - distribution: amazoncorretto
            version: 22
          - distribution: openjdk
            version: 16

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build variables
        id: vars
        shell: bash
        run: |
          echo "BASE_IMAGE=debian:bookworm-slim" >>"$GITHUB_ENV"
          echo "IMAGE_TAG=ghcr.io/pyrohost/yolks:java_${{ matrix.distribution }}_${{ matrix.version }}_${{ matrix.variant }}" >>"$GITHUB_ENV"

      - name: Prepare build context
        run: |
          mkdir -p java/build
          cp src/entrypoints/java/${{ matrix.variant }}/entrypoint.sh java/build/
          chmod +x java/build/entrypoint.sh
          cat >java/build/Dockerfile <<'EOF'
          FROM --platform=$TARGETOS/$TARGETARCH ${{ env.BASE_IMAGE }}

          LABEL author="Pyro Inc."
          LABEL org.opencontainers.image.source="https://github.com/pyrohost/yolks"
          LABEL org.opencontainers.image.licenses=MIT
          LABEL org.opencontainers.image.description="Docker image for Pterodactyl Java $([[ "${{ matrix.variant }}" == "minecraft" ]] && echo 'Minecraft servers' || echo 'applications')"
          LABEL org.opencontainers.image.version="${{ matrix.version }}"

          # Base packages
          RUN rm -rf /usr/bin/dd /usr/bin/fallocate /usr/bin/truncate /usr/bin/xfs_mkfile && \
              apt-get update -y && \
              apt-get install -y --no-install-recommends curl gnupg wget lsb-release jq unzip lsof ca-certificates openssl git tar sqlite3 fontconfig tzdata iproute2 libstdc++6 && \
              rm -rf /var/lib/apt/lists/*

          # Install JDK depending on distribution
          ARG JAVA_DISTRIBUTION="${{ matrix.distribution }}"
          ARG JAVA_VERSION="${{ matrix.version }}"
          RUN set -eux; \
            if [ "$JAVA_DISTRIBUTION" = "openjdk" ]; then \
              echo "Installing OpenJDK $JAVA_VERSION from Debian repositories"; \
              apt-get update && apt-get install -y --no-install-recommends openjdk-${{ matrix.version }}-jdk && \
              apt-get clean && rm -rf /var/lib/apt/lists/*; \
            elif [ "$JAVA_DISTRIBUTION" = "temurin" ]; then \
              echo "Installing Temurin $JAVA_VERSION via Adoptium APT repo"; \
              mkdir -p /etc/apt/keyrings && \
              curl -fsSL https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc && \
              echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(lsb_release -cs) main" > /etc/apt/sources.list.d/adoptium.list && \
              apt-get update && apt-get install -y --no-install-recommends temurin-${{ matrix.version }}-jdk && \
              apt-get clean && rm -rf /var/lib/apt/lists/*; \
            elif [ "$JAVA_DISTRIBUTION" = "amazoncorretto" ]; then \
              echo "Installing Amazon Corretto $JAVA_VERSION via AWS APT repo"; \
              wget -O- https://apt.corretto.aws/corretto.key | gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg && \
              echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" > /etc/apt/sources.list.d/corretto.list && \
              apt-get update && apt-get install -y --no-install-recommends java-${{ matrix.version }}-amazon-corretto-jdk && \
              apt-get clean && rm -rf /var/lib/apt/lists/*; \
            else \
              echo "Unknown distribution $JAVA_DISTRIBUTION"; \
              exit 1; \
            fi

          # Create non-root user expected by Pterodactyl
          RUN useradd -d /home/container -m container
          USER container
          ENV USER=container HOME=/home/container
          WORKDIR /home/container

          COPY entrypoint.sh /entrypoint.sh
          CMD ["/bin/bash", "/entrypoint.sh"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: java/build
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
